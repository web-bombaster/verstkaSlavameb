
document.addEventListener(
	"DOMContentLoaded", () => {
		function loadData() {
	return new Promise((resolve, reject) => {
	  	// setTimeout не является частью решения
	  	// Код ниже должен быть заменен на логику подходящую для решения вашей задачи
		setTimeout(resolve, 100);
	})
};

loadData()
	.then(() => {
		let preloaderEl = document.getElementById('preloader');
		preloaderEl.classList.add('hidden');
		preloaderEl.classList.remove('visible');
	});

const openSearchPanel = () => {
	let btnSearch = document.querySelector('.open-search');
	let searchPanel = document.querySelector('.search');
	let searchClose = document.querySelector('.search-close');
	
	btnSearch.addEventListener('click', (e) => {
		e.preventDefault();
		searchPanel.classList.toggle('active');
	});

	searchClose.addEventListener('click', (e) => {
		e.preventDefault();
		searchPanel.classList.toggle('active');
	});
};

openSearchPanel();
// Если уже есть мобильное меню, удаляем его, чтобы не плодить дубли
const navMobileCheck = () => {
	const navMobileCheck = document.querySelector('.nav__list--mobile');
	if (navMobileCheck) {
		navMobileCheck.remove();
	};
};



// Обертки - создаем нужные дивы для правильной разметки меню в десктопе
// в десктопе для a.nav__link.nav__link--open-panel(href="#") внутри li.nav__item все следующие элементы ul.col.nav__col засунуть в одну обертку .nav__panel .container .row.nav__row
const wrappersForMenu = () => {
	const widthViewport = document.documentElement.clientWidth; // ширина вьюпорта
	// Если это десктопное меню, 992 - когда скрываем десктопное меню
	// if (widthViewport > 992) {
	if ((widthViewport > 992) && (!document.querySelector('.nav__panel'))) {

		const navLinkOpenPanel = document.querySelectorAll('.nav__link--open-panel'); // Все кнопки (ссылки) открытия панели в меню

		navLinkOpenPanel.forEach(panel => {

			// создаем wrapperForPanel , потом будем сюда складывать .col.nav__col
			const wrapperForPanel = document.createElement('div');
			wrapperForPanel.setAttribute("class", "nav__panel");

			// найдем всех соседей .col.nav__col
			const colInPanel = panel.parentElement.querySelectorAll('.col.nav__col'); // от кнопки идем к родителю и от него ищем .col.nav__col

			// проходим по .col.nav__col, складываем их во wrapperForPanel.
			colInPanel.forEach(element => {
				const item = element.cloneNode(true);
				wrapperForPanel.append(item);
				element.remove();
			});

			// для wrapperForPanel делаем нужные обертки
			wrapperForPanel.innerHTML = "<div class='container'><div class='row nav__row'>" + wrapperForPanel.innerHTML + "</div></div>";

			// wrapperForPanel вставляем после ссылки открытия меню
			panel.after(wrapperForPanel);

		});

	}
};
wrappersForMenu();
// запускаем wrappersForMenu при ресайзе
window.addEventListener("resize", wrappersForMenu);



// Открытие - закрытие панели для десктопного меню
const openMenuPanel = () => {
	let widthViewport = document.documentElement.clientWidth; // ширина вьюпорта

	if (widthViewport > 992) {

		// Кнопки открытия меню
		let navLinkOpenPanel = document.querySelectorAll('.nav__link--open-panel');
		//  Панели меню
		let navPanel = document.querySelectorAll('.nav__panel');

		// Если в обертке уже есть мобильное меню, удаляем его, чтобы не плодить дубли
		// navMobileCheck();

		// Перебираем открывающие панель ссылки
		navLinkOpenPanel.forEach(element => {

			// По наведению
			element.addEventListener('mouseenter', (e) => {

				// Закрываем открытые панели
				navPanel.forEach(element => {
					if (element.classList.contains('active')) {
						element.classList.toggle('active');
					}

					// высота меню, на которую сдвинем панель вниз
					const hMenu = document.querySelector('.nav__list').offsetHeight;
					element.style.top = hMenu + 'px';
				});

				// Открываем нужную панель
				e.preventDefault();
				element.nextElementSibling.classList.toggle('active'); // следующий

			});

			// Покидаем открывающий пункт (li) или его потомков, закрываем панель
			const navItem = element.parentNode;
			navItem.addEventListener('mouseleave', (e) => {
				// element.nextElementSibling.classList.toggle('active');
				element.nextElementSibling.classList.remove('active');
			});

		});

	};

};
openMenuPanel();
// запускаем openMenuPanel при ресайзе
window.addEventListener("resize", openMenuPanel);



// Если не десктоп, клонируем меню, меняем клону классы для дальнейшего преобразования в мобильное меню
const mobileMenu = () => {
	const widthViewport = document.documentElement.clientWidth; // ширина вьюпорта
	const navList = '.nav__list'; // будем клонировать этот элемент

	if (widthViewport <= 992) {
		navMobileCheck(); // Если в обертке уже есть мобильное меню, удаляем его, чтобы не плодить дубли
		const newMenu = document.querySelector(navList).cloneNode(true); // клонируем меню
		// newMenu.classList.remove('nav__list');

		let wrapper = document.createElement('div'); // Делаем нужную обертку div
		wrapper.classList.add('nav__list--mobile'); // задаем класс nav__list--mobile
		wrapper.id = 'mobile-menu'; // задаем айдишник
		wrapper.prepend(newMenu); // оборачиваем меню в div.nav__list--mobile
		document.querySelector('.header').after(wrapper); // после .header вставляем получившееся меню

		// initMobileMenu(); // Инициализация mmenu.js
	} else {
		navMobileCheck(); // Если уже есть мобильное меню, удаляем его, чтобы не плодить дубли
	};
};
mobileMenu();
// запускаем mobileMenu при ресайзе
window.addEventListener("resize", mobileMenu);



// высота оверлея меню
function heightMenuOverlay() {
	const widthViewport = document.documentElement.clientWidth; // ширина вьюпорта

	if (widthViewport <= 992) {
		const heightViewport = document.documentElement.clientHeight; // высота вьюпорта
		const heightHeader = document.querySelector('.header').offsetHeight; // высота хедера
		const heightMenuOverlay = heightViewport - heightHeader; // высота оверлея меню
		const menuActive = document.querySelector('.nav__list--mobile');

		menuActive.style.height = heightMenuOverlay + 'px';
		menuActive.style.top = heightHeader + 'px';
	}
}
heightMenuOverlay();
// запускаем heightMenuOverlay при ресайзе
window.addEventListener("resize", heightMenuOverlay);



// Показать / скрыть мобильное меню
function menuToggle() {
	const menuBtn = document.querySelector('.header__menu-btn');
	const body = document.querySelector('body');
	const menu = document.querySelector('.nav__list--mobile');

	if (!menuBtn.classList.contains('toggle')) {
		menuBtn.classList.add('toggle');
		menu.classList.add('toggle');
		body.classList.add('toggle');
	} else {
		menuBtn.classList.remove('toggle');
		menu.classList.remove('toggle');
		body.classList.remove('toggle');
	}

	window.addEventListener('resize', function () {
		menuBtn.classList.remove('toggle');
		menu.classList.remove('toggle');
		body.classList.remove('toggle');
	}, true);

	// heightMenuOverlay(); // меняем высоту оверлея меню при ресайзе
}

// Показать / скрыть меню по клику на кнопку
document.querySelector('.header__menu-btn').addEventListener("click", menuToggle);


// Показать / скрыть в мобильном меню подменю
function subMenuToggle(element) {
	const subMenuBtn = document.querySelectorAll('.nav__list--mobile .nav__link--open-panel'); // ссылка для открытия подменю
	const navListMobile = document.querySelector('.nav__list--mobile'); // сюда будем складывать обертки подменюшек
	let zIndexValue = 100;


	// По клику на кнопку для субменю будем формировать и показывать подменю
	const subBtnClick = (e) => {

		// Формируем обертку для подменю
		const subMenuWrapper = document.createElement('div');
		zIndexValue++;
		subMenuWrapper.classList.add('nav__list'); // обертка для подменю
		subMenuWrapper.classList.add('z-index'); // обертка для подменю
		subMenuWrapper.classList.add('z-index-' + zIndexValue); // обертка для подменю
		// subMenuWrapper.classList.remove('nav__list');
		navListMobile.append(subMenuWrapper); // добавляем обртку к основному меню
		subMenuWrapper.style.zIndex = zIndexValue; // задаем z-index для слоя с подменю

		// Формируем хедер для подменю с кнопкой назад
		const subMenuHeader = document.createElement('div');
		subMenuHeader.classList.add('submenu__header'); // обертка для кноки назад
		const textForPrevLink = e.srcElement.textContent; // текст для кноки назад
		subMenuHeader.textContent = textForPrevLink;
		subMenuWrapper.append(subMenuHeader);

		// Формируем подменю
		// const newSubMenu = e.target.parentNode.cloneNode(true);
		let newSubMenu = document.createElement('div');
		let parentSubmenuList;
		if (zIndexValue == 101) {
			parentSubmenuList = '.nav__col';
		}
		if (zIndexValue == 102) {
			parentSubmenuList = '.submenu__item';
		}
		// const newSubMenuItem = e.target.parentNode.querySelectorAll('.nav__col');
		const newSubMenuItem = e.target.parentNode.querySelectorAll(parentSubmenuList);
		newSubMenuItem.forEach(element => {
			const temp = element.cloneNode(true);
			newSubMenu.append(temp);
			// newSubMenu.append(element);
		});
		subMenuWrapper.append(newSubMenu);

		// Закрываем подменю для возврата к родителю
		subMenuHeader.addEventListener("click", () => {
			setTimeout(() => { subMenuWrapper.classList.toggle('active'); }, 100); // класс, чтобы выдвигать меню
			setTimeout(() => { subMenuWrapper.remove(); }, 500); // удаляем подменю, чтобы не пложить копии
			zIndexValue--;
		});

		// subMenuWrapper.style.top = 60 + 'px'; // добавляем отступ
		// класс, чтобы выдвигать меню
		setTimeout(() => { subMenuWrapper.classList.add('active'); }, 100); // класс, чтобы выдвигать меню
	};

	// Для каждой кноппки, открывающей панель подменю, отслеживаем клик - для показа подменю второго уровня
	subMenuBtn.forEach(element => {
		element.addEventListener("click", subBtnClick);
	});

	// Для каждой кноппки, открывающей подменю, отслеживаем клик - для показа подменю третьего уровня
	let submenu3Level = document.querySelectorAll('.nav__list--mobile .nav__item--title .nav__submenu');
	submenu3Level.forEach(element => {
		let titleSubmenu3Level = element.previousElementSibling;
		// console.log(titleSubmenu3Level);
		titleSubmenu3Level.addEventListener("click", subBtnClick);
		titleSubmenu3Level.addEventListener("click", () => {
			// console.log('titleSubmenu3Level');
		});
	});


	// subMenuBtn.forEach(element => {
	// 	element.addEventListener("click", subBtnClick);
	// });
}

subMenuToggle();
window.addEventListener("resize", subMenuToggle);




// document.querySelectorAll('.nav__list--mobile .nav__link--open-panel').addEventListener("click", subMenuToggle);

// Инициализация mmenu.js
// const initMobileMenu = () => {
// 	new Mmenu("#mobile-menu",
// 		{
// 			// slidingSubmenus: false
// 		},
// 		{
// 			// configuration
// 			offCanvas: {
// 				page: {
// 					selector: "#page"
// 				}
// 			}
// 		});
// };
// запускаем initMobileMenu при ресайзе
// window.addEventListener("resize", initMobileMenu);



if (document.querySelector('.smooth-scroll')) {

	const menuListLink = document.querySelectorAll('.smooth-scroll'); // ссылки меню
	// const mainScroll = document.querySelector('.main__scroll'); // кнопка вниз
	// const linkToScroll = [...menuListLink, mainScroll]; // объединим все ссылки для плавной прокрутки в один масив с помощь spread "..."

	// Для всех ссылок плавной прокрутки
	menuListLink.forEach(element => {
		// Навешиваем событие клика на ссылку меню
		element.addEventListener('click', (event) => {
			event.preventDefault(); // отключаем стандартное поведение ссылки

			const menuLink = event.target.getAttribute('href').slice(1); // значение атрибута href ссылки мюню, по которой кликнем, без решетки

			// Прокрутка страницы до нужного блока при клике на пункт меню
			document.getElementById(menuLink).scrollIntoView({
				behavior: 'smooth',
				block: 'start'
			});
		});
	});
	
}



if (document.querySelector('.show-text')) {
	const showText = () => {
		let showText = document.querySelectorAll('.show-text');	
	
		showText.forEach(element => {
			const hiddenText = element.previousElementSibling;
	
			if (hiddenText.className == 'hidden-text') {
				element.addEventListener("click", (e) => {
					e.preventDefault();
					console.dir(e);
					hiddenText.classList.toggle('active');
					if (hiddenText.classList.value === 'hidden-text') {
						e.srcElement.innerText = "Читать далее";
					} else {
						e.srcElement.innerText = "Скрыть";
					};
				});
			};
		});
	};
	
	showText();	
}

const headerFixed = () => {
    if (document.documentElement.clientWidth <= 992) {
        const heightHeader = document.querySelector('.header').offsetHeight; // высота хедера
        document.body.style.paddingTop = heightHeader + 'px';
    } else {
        document.body.style.paddingTop = 0;
    }
};

headerFixed();
// запускаем headerFixed при ресайзе
window.addEventListener("resize", headerFixed);// Инициализация Inputmask
// https://github.com/RobinHerbots/Inputmask

function initInputMask() {
	let formPhone = document.querySelectorAll('.form__phone');
	formPhone.forEach(element => {
		Inputmask({ "mask": "+7 (999) 999-99-99" }).mask(element);
	});
}

initInputMask();

// Инициализация just-validate
// https://github.com/horprogs/Just-validate
// https://just-validate.dev/

function initJustValidatHelpForme() {
	const validation = new JustValidate('.help__form');

	validation
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
		.addField('.form__email', [
			{
				rule: 'required',
				errorMessage: 'Email обязателен!',
			},
			{
				rule: 'email',
				errorMessage: 'Email не корректен!',
			},
		])
}

if (document.querySelector('.help__form')) {
	initJustValidatHelpForme();
}

function initJustValidatRegistrationForm() {
	const validation = new JustValidate('.registration__form');

	validation
		// .addField('.form__name', [
		// 	{
		// 		rule: 'required',
		// 		errorMessage: 'Введите имя!',
		// 	},
		// 	{
		// 		rule: 'minLength',
		// 		value: 3,
		// 		errorMessage: 'Минимум 3 символа',
		// 	},
		// 	{
		// 		rule: 'maxLength',
		// 		value: 30,
		// 		errorMessage: 'Максимум 30 символов',
		// 	},
		// ])
		.addField('.form__name', [
			{
				rule: 'required',
				errorMessage: 'Введите имя!',
			},
		])
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
		.addField('.form__email', [
			{
				rule: 'required',
				errorMessage: 'Email обязателен!',
			},
			{
				rule: 'email',
				errorMessage: 'Email не корректен!',
			},
		])
	// .onSuccess((event) => {

	// 	// sentForm();
	// 	// Когда валидация прошла, отправляем форму
	// 	let element = event.target;
	// 	let formData = new FormData(element);
	// 	let xhr = new XMLHttpRequest();
	// 	xhr.onreadystatechange = function () {
	// 		if (xhr.readyState === 4) {
	// 			if (xhr.status === 200) {
	// 				console.log('Отправлено');
	// 				// Закрываем модалку
	// 				element.closest('.modal').classList.remove('show');
	// 				// Показываем другую модалку с ссобщением об успещной отправке
	// 				document.getElementById('modal-05').classList.add('show');
	// 			}
	// 		}
	// 	}

	// 	xhr.open('POST', 'mail.php', true);
	// 	xhr.send(formData);

	// 	element.reset();

	// });
}

if (document.querySelector('.registration__form')) {
	initJustValidatRegistrationForm();
}

function initJustValidatGoodDeal() {
	const validation = new JustValidate('.good-deal__form');

	validation
		.addField('.form__phone', [
			{
				rule: 'required',
				errorMessage: 'Введите телефон!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
}

if (document.querySelector('.good-deal__form')) {
	initJustValidatGoodDeal();
}

function initJustValidatFeedbackForm() {
	const validation = new JustValidate('.feedback__form');

	validation
		.addField('.form__name', [
			{
				rule: 'required',
				errorMessage: 'Введите имя!',
			},
		])
		.addField('.form__agreement', [
			{
				rule: 'required',
				errorMessage: 'Подтвердите согласие на обработку персональных данных!',
			},
		])
	// .onSuccess((event) => {

	// 	// sentForm();
	// 	// Когда валидация прошла, отправляем форму
	// 	let element = event.target;
	// 	let formData = new FormData(element);
	// 	let xhr = new XMLHttpRequest();
	// 	xhr.onreadystatechange = function () {
	// 		if (xhr.readyState === 4) {
	// 			if (xhr.status === 200) {
	// 				console.log('Отправлено');
	// 				// Закрываем модалку
	// 				element.closest('.modal').classList.remove('show');
	// 				// Показываем другую модалку с ссобщением об успещной отправке
	// 				document.getElementById('modal-05').classList.add('show');
	// 			}
	// 		}
	// 	}

	// 	xhr.open('POST', 'mail.php', true);
	// 	xhr.send(formData);

	// 	element.reset();

	// });
}

if (document.querySelector('.feedback__form')) {
	initJustValidatFeedbackForm();
}const accordeonItems = document.querySelectorAll('.accordeon__title'); // Все заголовки элементов аккордиона, по которым щелкаем для открытия / закрытия контента выбранного элемента
const accordeonItemsContent = document.querySelectorAll('.accordeon__content'); // Контент всех элементов аккордиона, который открывается, закрывается

// Перебираем заголовки аккордеона, по которым можем щелкнуть
accordeonItems.forEach((element, index) => {
	// Вешаем событие клика на каждый заголовок аккордеона
	element.addEventListener('click', function () {

		// Если у элемента, по которому щелкнули, нет класса активности,
		// if (!accordeonItems[index].classList.contains('accordeon__title--active')) {

		// 	// Пробегаемся по заголовкам элементов аккордеона
		// 	accordeonItems.forEach(element => {
		// 		// удаляем класс активности
		// 		element.classList.remove('accordeon__title--active');
		// 	});

		// 	// Перебираем контент для айтемов аккордиона и скрываем.
		// 	accordeonItemsContent.forEach(element => {
		// 		element.classList.add('accordeon__content--hidden');
		// 	});
		// };

		// Переключаем класс активности элемента, по которому щелкнули
		accordeonItems[index].classList.toggle('accordeon__title--active');

		// Делаем тоггл для контета элемента, по которому щелкнули
		accordeonItemsContent[index].classList.toggle('accordeon__content--hidden');

	});
});// Инициализация слайдера swiper
// https://swiperjs.com/

function initSwiper() {

	if (document.querySelector('.home-hero__slider')) {
		const homeHeroSlider = new Swiper('.home-hero__slider', {
			spaceBetween: 0,
			// loop: true,
			autoplay: {
				delay: 2500,
			},
			// direction: 'vertical',

			breakpoints: {
				320: {
					grid: {
						rows: 2,
					},
					slidesPerView: 2,
				},

				768: {
					grid: {
						rows: 2,
					},
					slidesPerView: 2,
				},

				992: {
					grid: {
						rows: 3,
					},
					slidesPerView: 2,
				},
			},
		});
	};

	if (document.querySelector('.prod-slider__inner')) {
		const prodSliderInner = new Swiper('.prod-slider__inner', {
			spaceBetween: 20,
			slidesPerView: 1,
			loop: true,
			pagination: {
				el: ".prod-slider__pagination",
			},
			navigation: {
				nextEl: ".prod-slider__next",
				prevEl: ".prod-slider__prev",
			},
		});
	};

	if (document.querySelector('.reviews__list')) {
		let swiperReviews = new Swiper('.reviews__list', {
			spaceBetween: 20,
			slidesPerView: 1,
			loop: true,
			navigation: {
				nextEl: ".reviews__next",
				prevEl: ".reviews__prev",
			},
		});
	};

	if (document.querySelector('.partners__wrapper')) {
		let swiperPartners = new Swiper('.partners__wrapper', {

			slidesPerView: "auto",
			spaceBetween: 0,
			loop: true,
			pagination: {
				el: ".partners__pagination",
			},
			// resizeObserver: true,
			observeParents: true,

			breakpoints: {
				320: {
					// slidesPerView: 2,
					slidesPerView: "auto",
					centeredSlides: false,
					loop: true,
					spaceBetween: 10,
				},
				769: {
					slidesPerView: "auto",
					// slidesPerView: 1,
					loop: true,
					centeredSlides: false,
					spaceBetween: 15,
				},
				1601: {
					// slidesPerView: 6,
					watchOverflow: true,
					loop: false,
					centeredSlides: false,
					spaceBetween: 20,
				},
			},
		});
	};

	if (document.querySelector('.projects-slider__box')) {
		const projectsSliderBox = new Swiper('.projects-slider__box', {
			// slidesPerView: "auto",
			slidesPerView: 4,
			autoplay: {
				delay: 3500,
			},
			pagination: {
				el: ".projects-slider__pagination",
			},
			// observer: true,
			// observerUpdate: true,
			// observeParents: true,
			// observeSlideChildren: true,

			breakpoints: {
				220: {
					spaceBetween: 10,
					slidesPerView: 1,
					loop: true,
				},

				481: {
					spaceBetween: 10,
					slidesPerView: 2,
					slidesPerGroup: 1,
					loop: true,
				},

				769: {
					watchOverflow: true,
					loop: false,
					destroy: true, // уничтожение слайдера
				}
			},
		});

		window.addEventListener('resize', (e) => {
			projectsSliderBox.update();
			// projectsSliderBox.destroy();
		});
	};

	if (document.querySelector('.collection__slider')) {
		const collectionSlider = new Swiper('.collection__slider', {
			slidesPerView: "auto",
			autoplay: {
				delay: 2500,
			},
			// spaceBetween: 0,
			// loop: true,
			pagination: {
				el: ".collection__pagination",
			},
			navigation: {
				nextEl: ".collection__next",
				prevEl: ".collection__prev",
			},
			// resizeObserver: true,
			observeParents: true,

			breakpoints: {
				220: {
					spaceBetween: 10,
					slidesPerView: 1,
					loop: true,
				},

				481: {
					spaceBetween: 10,
					slidesPerView: 2,
					slidesPerGroup: 1,
					loop: true,
				},

				993: {
					spaceBetween: 20,
					slidesPerView: 3,
					slidesPerGroup: 1,
					loop: true,
				},
				1201: {
					spaceBetween: 36,
					watchOverflow: true,
					loop: false,
				},
			},
		});
	};

	if (document.querySelector('.collection-big-slider')) {
		let collectionMiniSlider = new Swiper('.collection-mini-slider', {
			slidesPerView: "auto",
			direction: 'vertical',
			spaceBetween: 10,
			freeMode: true,
			watchSlidesProgress: true,
			// freeMode: true, // при перетаскивании превью ведет себя как при скролле
			loop: true,
			navigation: {
				nextEl: ".collection-mini-slider__next",
				prevEl: ".collection-mini-slider__prev",
			},
		});

		let collectionBigSlider = new Swiper('.collection-big-slider', {
			slidesPerView: 1,
			spaceBetween: 10,
			loop: true,
			thumbs: {
				swiper: collectionMiniSlider,
			},
			navigation: {
				nextEl: ".collection-big-slider__next",
				prevEl: ".collection-big-slider__prev",
			},
			pagination: {
				el: ".collection-big-slider__pagination",
				type: "fraction",
			},
		});
	};

	if (document.querySelector('.pp-big-slider')) {

		let ppMiniSlider = new Swiper('.pp-mini-slider', {
			spaceBetween: 18,
			slidesPerView: 2,
			grid: {
				rows: 2,
			},
			watchSlidesProgress: true,
			loop: true,
			// direction: "vertical",
		});

		let ppBigSlider = new Swiper('.pp-big-slider', {
			spaceBetween: 18,
			slidesPerView: 1,
			loop: true,
			navigation: {
				nextEl: ".pp-big-slider__next",
				prevEl: ".pp-big-slider__prev",
			},
			pagination: {
				el: ".pp-big-slider__pagination",
				dynamicBullets: true,
			},
			thumbs: {
				swiper: ppMiniSlider,
			},
		});

		// Вычисляем и задаем высоту слайдеров в зависимости от высоты картинки .pp-big-slider__img
		const heightSliders = () => {
			if (document.querySelector('.pp-big-slider__img')) {
				const heightBigSliderImg = document.querySelector('.pp-big-slider__img').height + 'px';
				// console.log(heightBigSliderImg);
				document.querySelector('.pp-big-slider').style.height = heightBigSliderImg;
				document.querySelector('.pp-mini-slider').style.height = heightBigSliderImg;
			}
		};

		heightSliders();
		window.addEventListener("resize", heightSliders);
	};

	if (document.querySelector('.ready-project__imaeges')) {
		const readyProjectImaeges = new Swiper('.ready-project__imaeges', {
			spaceBetween: 10,
			slidesPerView: 1,
			loop: true,
			pagination: {
				el: ".ready-project__pagination",
				dynamicBullets: true,
			},
			navigation: {
				nextEl: ".ready-project__next",
				prevEl: ".ready-project__prev",
			},
		});
	};

	if (document.querySelector('.slider-two-columns__box')) {
		const readyProjectImaeges = new Swiper('.slider-two-columns__box', {
			spaceBetween: 20,
			slidesPerView: 2,
			loop: true,
			pagination: {
				el: ".slider-two-columns__pagination",
				dynamicBullets: true,
			},
			navigation: {
				nextEl: ".slider-two-columns__next",
				prevEl: ".slider-two-columns__prev",
			},

			breakpoints: {
				220: {
					spaceBetween: 10,
					slidesPerView: 1,
				},

				481: {
					slidesPerView: 2,
				},

				993: {
					spaceBetween: 20,
				},
			},
		});
	};
};

// window.addEventListener("resize", initSwiper);
initSwiper();


// https://github.com/dinbror/blazy/
// http://dinbror.dk/blog/blazy/#Usage


let blazy = new Blazy();

let homeContentImg = new Blazy({ 
	breakpoints: [{
		  width: 480 // max-width
	, src: 'data-src-small'
	 }
	   , {
		  width: 992 // max-width
		, src: 'data-src-medium'
}]
});if (document.querySelector('.colors-collection__item')) {
	const colorsCollection = () => {
		let colorsCollectionItem = document.querySelectorAll('.colors-collection__item'); // В этих элементах в дата атрибутах будут храниться названия цветов
		let boxForColorsName = document.querySelector('.collection-card__color'); // Сюда будем записывать название цвета

		// console.log(colorsCollectionItem);

		colorsCollectionItem.forEach(element => {
			// element.addEventListener('click', (e) => {
			element.addEventListener('mouseenter', (e) => {

				colorsCollectionItem.forEach(el => {
					el.classList.remove('active');
				});
				// searchPanel.classList.toggle('active');
				let colorName = element.getAttribute('data-colorName');
				element.classList.add('active');
				boxForColorsName.textContent = colorName;

			});
		});


	};
	
	colorsCollection();
};}
);
